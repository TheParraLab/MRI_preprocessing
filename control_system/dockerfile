# Use an official Python runtime as a parent image
FROM nvidia/cuda:12.2.2-base-ubuntu22.04

# Install Python and pip
RUN apt-get update && \
    apt-get install -y python3-pip python3-dev gettext && \
    # Check if /usr/bin/python is already a symlink or doesn't exist
    if [ ! -L /usr/bin/python ] && [ ! -e /usr/bin/python ]; then \
        ln -s /usr/bin/python3 /usr/bin/python; \
    fi && \
    # No need to create a symlink for pip as pip3 is already installed
    python3 -m pip install --upgrade pip

RUN apt-get update && \
    apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release && \
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null && \
    apt-get update && \
    apt-get install -y docker-ce-cli

# Installing dcm2niix
RUN apt-get update && apt-get install -y dcm2niix

# Installing niftyreg
RUN apt-get install -y git cmake g++ && \
    git clone https://github.com/KCL-BMEIS/niftyreg.git niftyreg-git && \
    mkdir niftyreg-git/build && \
    cd niftyreg-git/build && \
    cmake .. && \
    make && \
    make install

WORKDIR /app
#COPY ../app /app
# Install any needed packages specified in requirements.txt
RUN pip install --no-cache-dir flask flask_socketio pydicom numpy pandas nibabel scipy hdf5storage yappi

# Make port 5000 available to the world outside this container
EXPOSE 5000

# Define environment variable
ENV FLASK_APP=app.py
ENV FLASK_ENG=development

# Run app.py when the container launches
#CMD ["flask", "run", "--host=0.0.0.0"]
CMD ["python", "app.py"]